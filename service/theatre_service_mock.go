// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/theatre_service.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/vibhugarg123/book-my-show/entities"
	reflect "reflect"
)

// MockTheatreService is a mock of TheatreService interface
type MockTheatreService struct {
	ctrl     *gomock.Controller
	recorder *MockTheatreServiceMockRecorder
}

// MockTheatreServiceMockRecorder is the mock recorder for MockTheatreService
type MockTheatreServiceMockRecorder struct {
	mock *MockTheatreService
}

// NewMockTheatreService creates a new mock instance
func NewMockTheatreService(ctrl *gomock.Controller) *MockTheatreService {
	mock := &MockTheatreService{ctrl: ctrl}
	mock.recorder = &MockTheatreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTheatreService) EXPECT() *MockTheatreServiceMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockTheatreService) Add(arg0 entities.Theatre) (entities.Theatre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(entities.Theatre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockTheatreServiceMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTheatreService)(nil).Add), arg0)
}

// GetTheatreByName mocks base method
func (m *MockTheatreService) GetTheatreByName(arg0 string) ([]entities.Theatre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTheatreByName", arg0)
	ret0, _ := ret[0].([]entities.Theatre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTheatreByName indicates an expected call of GetTheatreByName
func (mr *MockTheatreServiceMockRecorder) GetTheatreByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTheatreByName", reflect.TypeOf((*MockTheatreService)(nil).GetTheatreByName), arg0)
}
