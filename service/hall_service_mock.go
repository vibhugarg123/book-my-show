// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/hall_service.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/vibhugarg123/book-my-show/entities"
	reflect "reflect"
)

// MockHallService is a mock of HallService interface
type MockHallService struct {
	ctrl     *gomock.Controller
	recorder *MockHallServiceMockRecorder
}

// MockHallServiceMockRecorder is the mock recorder for MockHallService
type MockHallServiceMockRecorder struct {
	mock *MockHallService
}

// NewMockHallService creates a new mock instance
func NewMockHallService(ctrl *gomock.Controller) *MockHallService {
	mock := &MockHallService{ctrl: ctrl}
	mock.recorder = &MockHallServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHallService) EXPECT() *MockHallServiceMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockHallService) Add(arg0 entities.Hall) (entities.Hall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(entities.Hall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockHallServiceMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHallService)(nil).Add), arg0)
}

// GetHallByTheatreId mocks base method
func (m *MockHallService) GetHallByTheatreId(arg0 int) ([]entities.Hall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHallByTheatreId", arg0)
	ret0, _ := ret[0].([]entities.Hall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHallByTheatreId indicates an expected call of GetHallByTheatreId
func (mr *MockHallServiceMockRecorder) GetHallByTheatreId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHallByTheatreId", reflect.TypeOf((*MockHallService)(nil).GetHallByTheatreId), arg0)
}
