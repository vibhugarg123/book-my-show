// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/user_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/vibhugarg123/book-my-show/entities"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// InsertUser mocks base method
func (m *MockUserRepository) InsertUser(arg0 entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockUserRepositoryMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), arg0)
}

// FetchUserByEmailId mocks base method
func (m *MockUserRepository) FetchUserByEmailId(arg0 string) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByEmailId", arg0)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByEmailId indicates an expected call of FetchUserByEmailId
func (mr *MockUserRepositoryMockRecorder) FetchUserByEmailId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByEmailId", reflect.TypeOf((*MockUserRepository)(nil).FetchUserByEmailId), arg0)
}

// FetchUserByEmailIdAndPassword mocks base method
func (m *MockUserRepository) FetchUserByEmailIdAndPassword(arg0, arg1 string) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByEmailIdAndPassword", arg0, arg1)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByEmailIdAndPassword indicates an expected call of FetchUserByEmailIdAndPassword
func (mr *MockUserRepositoryMockRecorder) FetchUserByEmailIdAndPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByEmailIdAndPassword", reflect.TypeOf((*MockUserRepository)(nil).FetchUserByEmailIdAndPassword), arg0, arg1)
}
