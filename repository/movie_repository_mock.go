// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/movie_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/vibhugarg123/book-my-show/entities"
	reflect "reflect"
)

// MockMovieRepository is a mock of MovieRepository interface
type MockMovieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepositoryMockRecorder
}

// MockMovieRepositoryMockRecorder is the mock recorder for MockMovieRepository
type MockMovieRepositoryMockRecorder struct {
	mock *MockMovieRepository
}

// NewMockMovieRepository creates a new mock instance
func NewMockMovieRepository(ctrl *gomock.Controller) *MockMovieRepository {
	mock := &MockMovieRepository{ctrl: ctrl}
	mock.recorder = &MockMovieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovieRepository) EXPECT() *MockMovieRepositoryMockRecorder {
	return m.recorder
}

// InsertMovie mocks base method
func (m *MockMovieRepository) InsertMovie(arg0 entities.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMovie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMovie indicates an expected call of InsertMovie
func (mr *MockMovieRepositoryMockRecorder) InsertMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMovie", reflect.TypeOf((*MockMovieRepository)(nil).InsertMovie), arg0)
}

// FetchMovieByName mocks base method
func (m *MockMovieRepository) FetchMovieByName(arg0 string) ([]entities.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMovieByName", arg0)
	ret0, _ := ret[0].([]entities.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMovieByName indicates an expected call of FetchMovieByName
func (mr *MockMovieRepositoryMockRecorder) FetchMovieByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMovieByName", reflect.TypeOf((*MockMovieRepository)(nil).FetchMovieByName), arg0)
}

// FetchActiveMovies mocks base method
func (m *MockMovieRepository) FetchActiveMovies() ([]entities.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchActiveMovies")
	ret0, _ := ret[0].([]entities.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchActiveMovies indicates an expected call of FetchActiveMovies
func (mr *MockMovieRepositoryMockRecorder) FetchActiveMovies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchActiveMovies", reflect.TypeOf((*MockMovieRepository)(nil).FetchActiveMovies))
}
