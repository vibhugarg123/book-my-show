// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/booking_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	gomock "github.com/golang/mock/gomock"
	entities "github.com/vibhugarg123/book-my-show/entities"
	reflect "reflect"
)

// MockBookingRepository is a mock of BookingRepository interface
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// InsertBooking mocks base method
func (m *MockBookingRepository) InsertBooking(arg0 *entities.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBooking", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBooking indicates an expected call of InsertBooking
func (mr *MockBookingRepositoryMockRecorder) InsertBooking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBooking", reflect.TypeOf((*MockBookingRepository)(nil).InsertBooking), arg0)
}

// FetchBookingByUserId mocks base method
func (m *MockBookingRepository) FetchBookingByUserId(arg0 int) ([]entities.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBookingByUserId", arg0)
	ret0, _ := ret[0].([]entities.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBookingByUserId indicates an expected call of FetchBookingByUserId
func (mr *MockBookingRepositoryMockRecorder) FetchBookingByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBookingByUserId", reflect.TypeOf((*MockBookingRepository)(nil).FetchBookingByUserId), arg0)
}
